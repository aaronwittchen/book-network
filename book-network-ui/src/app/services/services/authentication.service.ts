/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { activate } from '../fn/authentication/activate';
import { Activate$Params } from '../fn/authentication/activate';
import { ApiResponseAuthenticationResponse } from '../models/api-response-authentication-response';
import { ApiResponseString } from '../models/api-response-string';
import { authenticate } from '../fn/authentication/authenticate';
import { Authenticate$Params } from '../fn/authentication/authenticate';
import { register } from '../fn/authentication/register';
import { Register$Params } from '../fn/authentication/register';


/**
 * Endpoints for user authentication and registration
 */
@Injectable({ providedIn: 'root' })
export class AuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `register()` */
  static readonly RegisterPath = '/auth/register';

  /**
   * Register a new user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * Register a new user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `authenticate()` */
  static readonly AuthenticatePath = '/auth/authenticate';

  /**
   * Authenticate user and get JWT token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate$Response(params: Authenticate$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseAuthenticationResponse>> {
    return authenticate(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticate user and get JWT token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<ApiResponseAuthenticationResponse> {
    return this.authenticate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseAuthenticationResponse>): ApiResponseAuthenticationResponse => r.body)
    );
  }

  /** Path part for operation `activate()` */
  static readonly ActivatePath = '/auth/activate-account';

  /**
   * Activate user account with activation token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activate()` instead.
   *
   * This method doesn't expect any request body.
   */
  activate$Response(params: Activate$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return activate(this.http, this.rootUrl, params, context);
  }

  /**
   * Activate user account with activation token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activate(params: Activate$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.activate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

}
